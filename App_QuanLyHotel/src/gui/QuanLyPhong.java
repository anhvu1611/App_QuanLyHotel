package gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import connectDB.ConnectDB;
import dao.Phong_DAO;
import entity.Phong;

/**
 *
 * @author Vu
 */
public class QuanLyPhong extends javax.swing.JPanel {
	private JButton btn_Clear_Phong;
	private JButton btn_SuaPhong_Phong;
	private JButton btn_XoaPhong_Phong;
	private JButton btn_themPhong_Phong;
	private JPanel jPanel1;
	private JPanel jPanel2;
	private JTable jtable_Phong;
	private JLabel lblGiPhng;
	private JLabel lbl_TimKiem;
	private JLabel lbl_danhmucPhong;
	private JLabel lbl_loaiphong;
	private JLabel lbl_maphong;
	private JLabel lbl_tinhtrang;
	private JScrollPane scrollPane_Phong;
	private JTextField txt_Giaphong_Phong;
	private JComboBox<String> txt_LoaiPhong_Phong;
	private JTextField txt_MaPhong_Phong;
	private JTextField txt_TimKiem_Phong;
	private JComboBox<String> txt_TinhTrang_Phong;
	private DefaultTableModel model_Phong;
	private Phong_DAO phong_dao;
	private ArrayList<Phong> listPhong;

	/**
	 * Creates new form PanelQuanLyPhong
	 */
	public QuanLyPhong() {
		try {
			ConnectDB.getInstance().connect();
		} catch (SQLException e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		phong_dao = new Phong_DAO();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {

		lbl_danhmucPhong = new JLabel();
		jPanel1 = new JPanel();
		lbl_maphong = new JLabel();
		lbl_loaiphong = new JLabel();
		lbl_tinhtrang = new JLabel();
		lblGiPhng = new JLabel();
		txt_LoaiPhong_Phong = new JComboBox<>();
		txt_TinhTrang_Phong = new JComboBox<>();
		;
		txt_Giaphong_Phong = new JTextField();
		txt_MaPhong_Phong = new JTextField();
		btn_themPhong_Phong = new JButton();
		btn_SuaPhong_Phong = new JButton();
		btn_XoaPhong_Phong = new JButton();
		btn_Clear_Phong = new JButton();
		jPanel2 = new JPanel();
		lbl_TimKiem = new JLabel();
		txt_TimKiem_Phong = new JTextField();
		scrollPane_Phong = new JScrollPane();
		jtable_Phong = new JTable();

		setPreferredSize(new Dimension(1295, 634));

		lbl_danhmucPhong.setFont(new Font("Segoe UI", 1, 36)); // NOI18N
		lbl_danhmucPhong.setText("Danh mục phòng");
		lbl_danhmucPhong.setPreferredSize(new Dimension(305, 48));

		jPanel1.setBorder(BorderFactory.createTitledBorder(null, "Thông tin phòng", TitledBorder.CENTER,
				TitledBorder.DEFAULT_POSITION, new Font("Segoe UI", 0, 18))); // NOI18N

		lbl_maphong.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
		lbl_maphong.setText("Mã phòng:");

		lbl_loaiphong.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
		lbl_loaiphong.setText("Loại phòng:");

		lbl_tinhtrang.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
		lbl_tinhtrang.setText("Tình trạng:");

		lblGiPhng.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
		lblGiPhng.setText("Giá phòng:");

		txt_LoaiPhong_Phong.setFont(new Font("Segoe UI", 0, 14)); // NOI18N

		txt_TinhTrang_Phong.setFont(new Font("Segoe UI", 0, 14)); // NOI18N

		txt_Giaphong_Phong.setFont(new Font("Segoe UI", 0, 14)); // NOI18N

		txt_MaPhong_Phong.setFont(new Font("Segoe UI", 0, 14)); // NOI18N

		// tooltip các nút chức năng của quản lý phòng
		btn_themPhong_Phong.setToolTipText("Atl + A");
		btn_XoaPhong_Phong.setToolTipText("Atl + R");
		btn_SuaPhong_Phong.setToolTipText("Atl + U");
		btn_Clear_Phong.setToolTipText("Atl + C");

		// sử dụng phím tắt
		btn_themPhong_Phong.setMnemonic(KeyEvent.VK_A);
		btn_XoaPhong_Phong.setMnemonic(KeyEvent.VK_R);
		btn_SuaPhong_Phong.setMnemonic(KeyEvent.VK_U);
		btn_Clear_Phong.setMnemonic(KeyEvent.VK_C);

		btn_themPhong_Phong.setIcon(new ImageIcon("item//add-24.png")); // NOI18N
		btn_themPhong_Phong.setText("Thêm");
		btn_themPhong_Phong.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				addnew_Phong();
			}
		});

		btn_SuaPhong_Phong.setIcon(new ImageIcon("item//update-24.png")); // NOI18N
		btn_SuaPhong_Phong.setText("Cập nhật");
		btn_SuaPhong_Phong.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				edit_Phong();
			}
		});
		btn_XoaPhong_Phong.setIcon(new ImageIcon("item//remove-24.png")); // NOI18N
		btn_XoaPhong_Phong.setText("Xóa");
		btn_XoaPhong_Phong.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				int row = jtable_Phong.getSelectedRow();
				String maP = txt_MaPhong_Phong.getText();
				if (maP.equals("")) {
					JOptionPane.showMessageDialog(null, "Vui lòng chọn phòng để xóa!");
				} else {
					int choice = JOptionPane.showConfirmDialog(null, "Bạn có chắc muốn xóa không ?", maP,
							JOptionPane.YES_NO_CANCEL_OPTION);
					if (choice == JOptionPane.YES_OPTION) {
						model_Phong.removeRow(row);
						phong_dao.delete_Phong(maP);
						JOptionPane.showMessageDialog(null, "Xóa xong!");
						clear_Phong();
					} else {
						JOptionPane.showMessageDialog(null, "Error!");
					}
				}
			}
		});

		btn_Clear_Phong.setIcon(new ImageIcon("item//refresh-24.png")); // NOI18N
		btn_Clear_Phong.setText("Làm lại");
		btn_Clear_Phong.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				clear_Phong();
			}
		});

		txt_LoaiPhong_Phong.setModel(new DefaultComboBoxModel<String>(
				new String[] { "--Select--", "Phong Gia dinh", "Phong Don", "Phong Doi" }));
		txt_TinhTrang_Phong
				.setModel(new DefaultComboBoxModel<String>(new String[] { "--Select--", "tren 3 nam", "duoi 3 nam" }));
		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(42, 42, 42).addGroup(jPanel1Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(lbl_loaiphong, javax.swing.GroupLayout.PREFERRED_SIZE, 91,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(lblGiPhng, javax.swing.GroupLayout.PREFERRED_SIZE, 91,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(lbl_tinhtrang, javax.swing.GroupLayout.PREFERRED_SIZE, 91,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(lbl_maphong, javax.swing.GroupLayout.PREFERRED_SIZE, 91,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45,
										Short.MAX_VALUE)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(txt_LoaiPhong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 238,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(txt_TinhTrang_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 238,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(txt_Giaphong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 238,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(txt_MaPhong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 238,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(38, 38, 38))
						.addGroup(jPanel1Layout.createSequentialGroup().addGap(17, 17, 17)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(btn_XoaPhong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 110,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(btn_themPhong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 110,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(btn_SuaPhong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 110,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(btn_Clear_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 110,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(55, 55, 55)))));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(36, 36, 36)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(lbl_maphong, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(txt_MaPhong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(15, 15, 15)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(lbl_loaiphong, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(txt_LoaiPhong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(23, 23, 23)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(lbl_tinhtrang, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(txt_TinhTrang_Phong, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(txt_Giaphong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(lblGiPhng, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(74, 74, 74)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(btn_themPhong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(btn_SuaPhong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(42, 42, 42)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(btn_Clear_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(btn_XoaPhong_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(59, Short.MAX_VALUE)));

		lbl_TimKiem.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
		lbl_TimKiem.setText("Tìm kiếm:");

		txt_TimKiem_Phong.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
		txt_TimKiem_Phong.addKeyListener(new KeyListener() {
			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
			}

			@Override
			public void keyReleased(KeyEvent e) {
				TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model_Phong);
				jtable_Phong.setRowSorter(sorter);
				sorter.setRowFilter(RowFilter.regexFilter(txt_TimKiem_Phong.getText().toLowerCase()));
			}

			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
			}
		});

		String[] colsPh = { "Mã phòng", "Loại phòng", "Tình trạng", "Giá" };
		model_Phong = new DefaultTableModel(colsPh, 0);
		jtable_Phong = new JTable(model_Phong);
		jtable_Phong.addMouseListener(new MouseListener() {

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseClicked(MouseEvent e) {
				int pos = jtable_Phong.getSelectedRow();
				txt_MaPhong_Phong.setText(model_Phong.getValueAt(pos, 0).toString());
				txt_MaPhong_Phong.setEnabled(false);
				txt_LoaiPhong_Phong.setSelectedItem(model_Phong.getValueAt(pos, 1));
				txt_TinhTrang_Phong.setSelectedItem(model_Phong.getValueAt(pos, 2));
				txt_Giaphong_Phong.setText(model_Phong.getValueAt(pos, 3).toString());

			}
		});
		scrollPane_Phong.setViewportView(jtable_Phong);
		loadPhong();
		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel2Layout.createSequentialGroup().addGap(46, 46, 46)
								.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(scrollPane_Phong, javax.swing.GroupLayout.DEFAULT_SIZE, 684,
												Short.MAX_VALUE)
										.addGroup(jPanel2Layout.createSequentialGroup()
												.addComponent(lbl_TimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 91,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(txt_TimKiem_Phong)))
								.addGap(27, 27, 27)));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup().addGap(30, 30, 30)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(lbl_TimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(txt_TimKiem_Phong, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18).addComponent(scrollPane_Phong, javax.swing.GroupLayout.PREFERRED_SIZE, 435,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(43, Short.MAX_VALUE)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(62, 62, 62)
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap())
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup().addGap(466, 466, 466).addComponent(lbl_danhmucPhong,
								javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(387, 387, 387)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup().addGap(81, 81, 81).addComponent(jPanel1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										layout.createSequentialGroup().addContainerGap()
												.addComponent(lbl_danhmucPhong, javax.swing.GroupLayout.PREFERRED_SIZE,
														57, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	// Check dữ liệu
	Border bdFalse = BorderFactory.createLineBorder(Color.red);
	Border bdTrue = BorderFactory.createLineBorder(Color.green);

	private void addnew_Phong() {
		if (validDataPhong()) {
			Phong p = revertPhong();
			model_Phong.addRow(new Object[] { p.getMaPhong(), p.getLoaiPhong(), p.getTinhTrang(), p.getGiaPhong() });
			phong_dao.create_Phong(p);
			JOptionPane.showMessageDialog(this, "Thêm thành công!");
			clear_Phong();
		}
	}

	private Phong revertPhong() {
		// TODO Auto-generated method stub
		String ma = txt_MaPhong_Phong.getText().trim();
		String loai = txt_LoaiPhong_Phong.getSelectedItem().toString();
		String tt = txt_TinhTrang_Phong.getSelectedItem().toString();
		float gia = Float.parseFloat(txt_Giaphong_Phong.getText());
		return new Phong(ma, loai, tt, gia);
	}

	private boolean validDataPhong() {
		// TODO Auto-generated method stub
		String ma = txt_MaPhong_Phong.getText().trim();
		String loai = txt_LoaiPhong_Phong.getSelectedItem().toString();
		String tt = txt_TinhTrang_Phong.getSelectedItem().toString();
		String gia = txt_Giaphong_Phong.getText().trim();
		// check mã phòng
		int n = 0;
		for (Phong p : listPhong) {
			if (ma.equals(p.getMaPhong()))
				n = 1;
		}

		if (n == 1) {
			JOptionPane.showMessageDialog(this, "Error: Mã phòng đã tồn tại!");
			txt_MaPhong_Phong.requestFocus(true);
			txt_MaPhong_Phong.setBorder(bdFalse);
			return false;
		}

		if (ma.length() > 0 || !ma.equals("")) {
			if (!ma.matches("^(P)[0-9]+")) {
				JOptionPane.showMessageDialog(this, "Error: Mã phòng phải theo mẫu: Bắt đầu bằng P theo sau là dãy số");
				txt_MaPhong_Phong.requestFocus(true);
				txt_MaPhong_Phong.setBorder(bdFalse);
				return false;
			} else {
				txt_MaPhong_Phong.setBorder(bdTrue);
			}
		} else {
			JOptionPane.showMessageDialog(this, "Error: Chưa nhập mã phòng!");
			txt_MaPhong_Phong.requestFocus(true);
			txt_MaPhong_Phong.setBorder(bdFalse);
			return false;
		}

		// check loại phòng
		if (loai.equals("--Select--")) {
			JOptionPane.showMessageDialog(this, "Error: Chưa chọn loại phòng!");
			return false;
		}

		// check tình trạng phòng
		if (tt.equals("--Select--")) {
			JOptionPane.showMessageDialog(this, "Error: Chưa chọn tình trạng phòng!");
			return false;
		}

		// Check gia phòng
		if (gia.equals("")) {
			JOptionPane.showMessageDialog(this, "Error: Chưa nhập giá!");
			txt_Giaphong_Phong.requestFocus(true);
			txt_Giaphong_Phong.setBorder(bdFalse);
			return false;
		} else {
			if (!gia.matches("[0-9]+\\.{0,1}[0-9]*")) {
				JOptionPane.showMessageDialog(this, "Error: Giá là giá trị số!");
				txt_Giaphong_Phong.requestFocus(true);
				txt_Giaphong_Phong.setBorder(bdFalse);
				return false;
			} else {
				txt_Giaphong_Phong.setBorder(bdTrue);
			}
		}
		return true;
	}

	private void edit_Phong() {
		int row = jtable_Phong.getSelectedRow();
		if (txt_MaPhong_Phong.getText().equals("")) {
			JOptionPane.showMessageDialog(this, "Bạn chưa chọn phòng để cập nhật thông tin!");
		} else {
			int choice = JOptionPane.showConfirmDialog(null, "Ban có chắc chắn muốn cập nhật khong ?");
			if (choice == JOptionPane.YES_OPTION) {
				if (validDataEditPhong()) {
					Phong p = revertPhong();
					model_Phong.setValueAt(p.getLoaiPhong(), row, 1);
					model_Phong.setValueAt(p.getTinhTrang(), row, 2);
					model_Phong.setValueAt(p.getGiaPhong(), row, 3);
					phong_dao.capNhat_Phong(p);
					clear_Phong();
					JOptionPane.showMessageDialog(null, "Cập nhật hoàn tất!");
				}
			}
		}
	}

	private boolean validDataEditPhong() {
		// TODO Auto-generated method stub
		String loai = txt_LoaiPhong_Phong.getSelectedItem().toString();
		String tt = txt_TinhTrang_Phong.getSelectedItem().toString();
		String gia = txt_Giaphong_Phong.getText().trim();
		// check loại phòng
		if (loai.equals("--Select--")) {
			JOptionPane.showMessageDialog(this, "Error: Chưa chọn loại phòng!");
			return false;
		}

		// check tình trạng phòng
		if (tt.equals("--Select--")) {
			JOptionPane.showMessageDialog(this, "Error: Chưa chọn tình trạng phòng!");
			return false;
		}

		// Check gia phòng
		if (gia.equals("")) {
			JOptionPane.showMessageDialog(this, "Error: Chưa nhập giá!");
			txt_Giaphong_Phong.requestFocus(true);
			txt_Giaphong_Phong.setBorder(bdFalse);
			return false;
		} else {
			if (!gia.matches("[0-9]+\\.{0,1}[0-9]*")) {
				JOptionPane.showMessageDialog(this, "Error: Giá là giá trị số!");
				txt_Giaphong_Phong.requestFocus(true);
				txt_Giaphong_Phong.setBorder(bdFalse);
				return false;
			} else {
				txt_Giaphong_Phong.setBorder(bdTrue);
			}
		}
		return true;
	}

	// Đọc dữ liệu vào bảng phòng
	public void loadPhong() {
		listPhong = phong_dao.getAllPhong();
		for (Phong ph : listPhong) {
			model_Phong
					.addRow(new Object[] { ph.getMaPhong(), ph.getLoaiPhong(), ph.getTinhTrang(), ph.getGiaPhong() });
		}
	}

	public void clear_Phong() {
		txt_MaPhong_Phong.setText("");
		txt_MaPhong_Phong.enable(true);
		txt_MaPhong_Phong.setBorder(null);
		txt_LoaiPhong_Phong.setSelectedIndex(0);
		txt_TinhTrang_Phong.setSelectedIndex(0);
		txt_Giaphong_Phong.setText("");
		txt_Giaphong_Phong.setBorder(null);
	}
}
